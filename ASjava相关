android jni开发：
1：使用AS和CMake
1）配置AS环境，增加javah工具生成，jni头文件
   Settings->Tools->External Tools->"+"
   Edit Tool中配置如下：
   Proram：C:\Program Files (x86)\Java\jdk1.8.0_144\bin\javah.exe            //配置javah工具路径
   Arguments：-classpath . -jni -d $ModuleFileDir$\src\main\cpp $FileClass$  //配置生成Javah头文件命令，路径是该工程路径（cpp文件夹是cmake使用的路径，也可使用jni使用androidmk文件）
   Working directory: $ModuleFileDir$\src\main\java                          //配置工程Java路径，native接口类的路径
   配置后，选中native接口定义的java文件，右键即可看到external tools定义的javah按键，生成jni的头文件
2）配置好CMake编译环境，在工程app路径下新建CMakeList.txt文件,参考链接 https://www.jianshu.com/p/39ca6c51bc20，CMake官方学习文档：英文文档：https://cmake.org/documentation/ ，中文文档：

https://www.zybuluo.com/khan-lau/note/254724

CMakeList.txt格式如下：
 For more information about using CMake with Android Studio, read the
# documentation: https://d.android.com/studio/projects/add-native-code.html

# Sets the minimum version of CMake required to build the native library.

#cmake支持的最小版本号
cmake_minimum_required(VERSION 3.4.1)

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds them for you.
# Gradle automatically packages shared libraries with your APK.

#设置so链接库的文件夹
 set(distribution_DIR ${CMAKE_SOURCE_DIR}/src/main/jniLibs)

#定义so库信息，add_library和set_target_properties成对写
 add_library(utils SHARED IMPORTED)
 set_target_properties(utils PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/src/main/jniLibs/${ANDROID_ABI}/libxxx1.so)

 add_library(cutils SHARED IMPORTED)
 set_target_properties(cutils PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/src/main/jniLibs/${ANDROID_ABI}/libxxx2.so)

#定义jni库的信息
 add_library( # Sets the name of the library.
              projectxxx

              # Sets the library as a shared library.
              SHARED

              # Provides a relative path to your source file(s).
              ${CMAKE_SOURCE_DIR}/src/main/cpp/xxx1.c
              ${CMAKE_SOURCE_DIR}/src/main/cpp/xxx2.c
              ${CMAKE_SOURCE_DIR}/src/main/cpp/xxx3.c
              ${CMAKE_SOURCE_DIR}/src/main/cpp/com_xxx_xxx_ProjectName_xxx_ProjectClass.cpp
              )

# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
              log-lib

              # Specifies the name of the NDK library that
              # you want CMake to locate.
              log )

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.
#添加链接库名
target_link_libraries( # Specifies the target library.
                      projectxxx
                      xxx2
                      xxx1
                      # Links the target library to the log library
                      # included in the NDK.
                      ${log-lib} )
3）完成以上步骤就可以进行AS 带so的APP编译。

PS：
jni定义的话使用动态定义比较好使，静态路径的函数可能导致编译失败，应该是路径问题
cpp文件建议使用以下方式生成：
========================================================================================================================================================================================
static jstring query_by_command(JNIEnv *env, jobject clazz, jstring modemType,jstring cmd,jstring prefix) {
     char output[100] = {0};
     
     return env->NewStringUTF(output);
  }

/*
 * Class:     com_tdtech_lte_ProjectMenuAssist_batemodem_ProjectMenu
 * Method:    setByCommands
 * Signature: (Ljava/lang/String;[Ljava/lang/String;)Z
 */
static jboolean set_by_commands(JNIEnv *env, jobject clazz, jstring modemType,jobjectArray cmd) {
    int ret = 0;
    
    return (ret == 0);
  }


static const char *classPathName = "com/xxx/xxx/xxx/xxx/XxxxXxx";//native接口定义类（路径+class名）

static JNINativeMethod methods[] = {
        { "queryByCommand", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", (void*)query_by_command},
        { "setByCommands", "(Ljava/lang/String;[Ljava/lang/String;)Z", (void*)set_by_commands},
};

/*
 * Register several native methods for one class.
 */
static int registerNativeMethods(JNIEnv* env, const char* className,
    JNINativeMethod* gMethods, int numMethods) {
    jclass clazz;

    clazz = env->FindClass(className);
    if (clazz == NULL) {
        ALOGE("Native registration unable to find class '%s'", className);
        return JNI_FALSE;
    }
    if (env->RegisterNatives(clazz, gMethods, numMethods) < 0) {
        ALOGE("RegisterNatives failed for '%s'", className);
        return JNI_FALSE;
    }

    return JNI_TRUE;
}


/*
 * Register native methods for all classes we know about.
 *
 * returns JNI_TRUE on success.
 */
static int registerNatives(JNIEnv* env) {
    if (!registerNativeMethods(env, classPathName,
                 methods, sizeof(methods) / sizeof(methods[0]))) {
        return JNI_FALSE;
    }

    return JNI_TRUE;
}

// ----------------------------------------------------------------------------
/*
 * This is called by the VM when the shared library is first loaded.
 */

typedef union {
    JNIEnv* env;
    void* venv;
} UnionJNIEnvToVoid;

jint JNI_OnLoad(JavaVM* vm, void* reserved) {

    UnionJNIEnvToVoid uenv;
    uenv.venv = NULL;
    jint result = -1;
    JNIEnv* env = NULL;

    ALOGI("JNI_OnLoad");

    if (vm->GetEnv(&uenv.venv, JNI_VERSION_1_4) != JNI_OK) {
        ALOGE("ERROR: GetEnv failed");
        goto bail;
    }
    env = uenv.env;

    if (registerNatives(env) != JNI_TRUE) {
        ALOGE("ERROR: registerNatives failed");
        goto bail;
    }

    result = JNI_VERSION_1_4;

bail:
    return result;
}
========================================================================================================================================================================================
2：AIDL添加：https://blog.csdn.net/luojiusan520/article/details/52884846
1）main文件夹下创建aidl文件夹，将AIDL文件加到该目录
2）代码中增加其实现
具体实现：
AS生成aidl文件后进行build生成对应的interFace类，在app\build\generated\source\aidl\debug\
生成后需要在服务端实现其功能：
在service类(MainService)中定义好private Binder mPropertInterface = new xxxxxxxxxxxxxx.Stub() {...}
public IBinder onBind(Intent intent) {
        return mPropertInterface;
    }
    绑定binder
将aidl文件夹拷贝到客户端：
定义一个ServiceConnection，
private IPropertInfoInterface mInfoInterface = null;
    private ServiceConnection mConnection = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            mInfoInterface = IPropertInfoInterface.Stub.asInterface(service);
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            mInfoInterface = null;
        }
    };
    在oncreat中用intent启动对应的服务
    Intent bindIntent = new Intent();
        bindIntent.setClassName("com.android.myapplication", "'com.android.myapplication.MainService");
        bindService(bindIntent, mConnection, BIND_AUTO_CREATE);
    服务绑定成功，可以通过mInfoInterface接口调用内部函数设置相关信息
=================================================================================================================================
3.Hal层开发
Google定义了Hal层抽象接口，便于上层调用，底层驱动具体实现hal的方式，实现上层不关心底层如何实现，只调用统一接口，底层驱动各个厂商可根据hal接口去具体定义自己硬件的相关实现过程
system代码部分在对应的interFaces文件夹下添加新的接口定义文件，如下：xxxxinterFace/1.0/IxxxxinterFace.hal
同样chip下也需要一份这样的接口文件，确保上下层可以通信，
一般来说hal层是用于提供底层具体实现的接口方式，便于上层通过该接口实现底层驱动相关功能，由此该接口的具体实现在底层一侧
一般在libhardware这种硬件依赖库中实现。

接口实现：
1)Android.mk:
LOCAL_PATH := $(call my-dir)

include $(CLEAR_VARS)
LOCAL_MODULE := vendor.hardware.xxxxinterface@1.0-service
LOCAL_INIT_RC := vendor.hardware.xxxxinterface@1.0-service.rc
LOCAL_MODULE_RELATIVE_PATH := hw
LOCAL_PROPRIETARY_MODULE := true
LOCAL_SRC_FILES := \
    xxxxInterface/xxxxInterface.cpp \
    xxxxInterface/do_xxx_work.c \
    service.cpp \

LOCAL_C_INCLUDES += vendor/xxx/chipset/modules/manufacture/xxx_interface/xxx_interface/inc \
                    vendor/xxx/chipset/modules/manufacture/xxx_interface/xxx_interface/inc \
                    vendor/xxx/chipset/modules/manufacture/xxx_interface/xxx_interface/inc \
                    vendor/xxx/chipset_common/modules/libc_sec/include \

LOCAL_SHARED_LIBRARIES := \
    liblog \
    libutils \
    libc_secshared \
    vendor.hardware.xxxxinterface@1.0

include $(BUILD_EXECUTABLE)

2)init rc文件定义vendor.hardware.xxxxinterface@1.0-service.rc：
service xxxxinterface-hal-1-0 /vendor/bin/hw/vendor.hardware.xxxxinterface@1.0-service
    class hal
    user system
    group system wifi dhcp inet net_raw net_admin
3)定义.h头文件绑定.hal
/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef VENDOR_HARDWARE_XXXXINTERFACE_V1_0_XXXXINTERFACE_H
#define VENDOR_HARDWARE_XXXXINTERFACE_V1_0_XXXXINTERFACE_H

#include <vendor/hardware/xxxxinterface/1.0/IxxxxInterface.h>
#include "xxxx_interface.h"

#include <hidl/MQDescriptor.h>
#include <hidl/Status.h>
#define LOG_TAG "vendor.hardware.xxxxinterface@1.0-service"
#define LOG_VERBOSE "vendor.hardware.xxxxinterface@1.0-service"
namespace vendor {
namespace hardware {
namespace xxxxinterface {
namespace V1_0 {
namespace implementation {

using ::vendor::hardware::xxxxinterface::V1_0::IxxxxInterface;


using ::android::hardware::Return;
using ::android::hardware::Void;
using ::android::hardware::hidl_vec;
using ::android::hardware::hidl_string;
using ::android::sp;
using namespace std;

#define DLOPEN_FACTORY_INTERFACE_SO  "lib_xxxx_interface.so"

typedef int (* NONE_PARA_RETURN_INT) ();

struct xxxxInterface : public IxxxxInterface {
public:
	xxxxInterface();
	~xxxxInterface();

	// Method to wrap legacy HAL with xxxxInterface class
	static IxxxxInterface* getInstance();
   Return<int32_t> function1() override;
   Return<void> function2() override;
private:
    static xxxxInterface* sInstance;
    void * open_lib_factory();
	void * sFacHandle;
	void * sDevHandle;

};

}  // namespace implementation
}  // namespace V1_0
}  // namespace xxxxinterface
}  // namespace hardware
}  // namespace vendor

#endif  // VENDOR_HARDWARE_xxxxINTERFACE_V1_0_xxxxINTERFACE_H

3)通过service.c将该接口实现绑定到系统服务，保证其可以运行：
/*
 * Copyright 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include <vendor/hardware/xxxxinterface/1.0/IxxxxInterface.h>
#include <hidl/LegacySupport.h>
#include <android/log.h>
#include <hidl/HidlSupport.h>
#include <hidl/HidlTransportSupport.h>
#include "xxxxInterface.h"

using vendor::hardware::xxxxinterface::V1_0::IxxxxInterface;
using vendor::hardware::xxxxinterface::V1_0::implementation::xxxxInterface;
using android::hardware::configureRpcThreadpool;
using android::hardware::joinRpcThreadpool;
using android::sp;

int main() {
    android::sp<IxxxxInterface> factoryinterface = xxxxInterface::getInstance();

    configureRpcThreadpool(1, true /*callerWillJoin*/);

    if (factoryinterface != nullptr) {
        factoryinterface->registerAsService("xxxxinterface_hal");
    } else {
        ALOGE("Can't create instance of IxxxxInterface, nullptr");
    }

    joinRpcThreadpool();

    return 0; // should never get here
}

4）实现.h文件即可正常调用接口函数了
==================================================================================================================================
4.selinux
avc: denied { read write } for pid=525 comm="xxxxxxinterf" name="ttyxxxx" dev="tmpfs" ino=3492 scontext=u:r:hal_xxxxxxxinterface_default:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=0 duplicate messages suppressed
标注的位置是添加权限时需要注意的：
1）{ read write } ：表示缺失的权限
2）xxxxxxinterf ：表示线程或所属代码的标签，比如若是system app会显示为system_app
3）device ：访问的节点标签type
4）ttyxxxx：具体的节点或文件名
5）chr_file：权限类型

添加权限
1）找到对应的sepolicy（device/xxx/vendor/xxx62/）下的芯片类型,在file_contexts中添加type：/dev/ttyxxxx   u:object_r:ttyxxxx_dev:s0
2）在device.te中绑定device和type：type ttyxxxx_dev dev_type
3）绑定完成后找到所属线程的te文件（hal_xxxxxxxinterface_default.te），添加权限：allow hal_xxxxxxxinterface_default ttyxxxx_dev:chr_file {read write open}; 
以上步骤完成后，selinux权限就被正常添加了
==================================================================================================================================
5.Gradle多重函数依赖解决：
AS使用Gradle编译时，对于重复定义检查较eclipse使用早期编译方式严格许多，当jar包中存在重复引用时会直接报错，正常情况需要解决该重复冲突
如无法解决，需要定义新的modele或library来引用该冲突依赖，
build.gradle中增加以下语句即可正常编译：
android {
   ....
   lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
        disable "ResourceType"
   }
   ....
}
但是该方式较为消耗内存，需要将gvm的使用量提升到1048MB左右才能正常编译。
===================================================================================================================================
4：JavaSwing开发：https://blog.csdn.net/xietansheng/article/details/72814492
IDE_J打包：open model settings->Artifacts->'+'，选择需要打包的模式如，JAR->form moedle。。。设置完成即可

编码规范：https://wiki.sei.cmu.edu/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java


java并行代码：继承，封装，多态
    private interface RequestCallBack<T> {
        void onSuccess(T val);
        void onFail(String errorMessage);
    }

    /**
     * Created by SRC-TJ-MM-BinYang on 2018/3/8.
     * this is the thread pool, we can request an new thread runnable to do the work which need more time,
     * I do the connect net work and Json resolution here
     * also we can do more work thread here...
     */

    private class OnLineWorkerThread<T> {

        private String _TAG = "OnLineWorkerThread";
        public static final int OPERATION_XXX_1 = 1;
        public static final int OPERATION_XXX_2 = 2;

        private ExecutorService mExecutorService;

        public OnLineWorkerThread(){


            BlockingQueue<Runnable> mBlockingQueue = new LinkedBlockingQueue<>();//when the queue empty , it cann't get any runnable, after add new runnable, the queue will be wake up and can be got runnable to to work

            ThreadFactory mFactory = new ThreadFactory() {

                private final AtomicInteger mCount = new AtomicInteger(1);

                @Override
                public Thread newThread(Runnable r) {
                    return new Thread(r, "new Thread #" + mCount.getAndIncrement());
                }
            };
            RejectedExecutionHandler mRejectedExecutionHandler = new RejectedExecutionHandler() {
                @Override
                public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {
                    try {
                        Log.d(_TAG,"your work has been rejected, please do the work again.");
                    } catch (RuntimeException e) {
                        e.printStackTrace();
                    }
                }
            };

            int mCorePoolSize = Runtime.getRuntime().availableProcessors();
            int mMaxiMumPoolSize = 10;
            long mKeepAliveTime = 500;
            TimeUnit mUnit = TimeUnit.SECONDS;

            mExecutorService = new ThreadPoolExecutor(mCorePoolSize,
                    mMaxiMumPoolSize, mKeepAliveTime,
                    mUnit, mBlockingQueue,
                    mFactory, mRejectedExecutionHandler);

            Log.d(_TAG,"OnLineWorkerThread init finish");
        }

        public void SendNewRunnable(int type) {
            mExecutorService.execute(new OnLineWorkerRunnable(type));
        }
 /*   public synchronized void SendNewRunnable(int type, RequestCallBack<RequestProgramClassifyListPattern> callBack) {
        mExecutorService.execute(new OnLineWorkerRunnable(type, callBack));
    }*/

        public void SendNewRunnable(int type, final int localId, int current_page) {
            mExecutorService.execute(new OnLineWorkerRunnable(type, localId, current_page, null));
        }
        public void SendNewRunnable(int type, String keyword, String string_type, int current_page) {
            mExecutorService.execute(new OnLineWorkerRunnable(type, keyword, string_type, current_page, null));
        }

        public synchronized void SendNewRunnable(int type, RequestCallBack requestCallBack, int channelID, int current_page) {
            if(current_page != -1)
                mExecutorService.execute(new OnLineWorkerRunnable(type, channelID, current_page, requestCallBack));
            else
                mExecutorService.execute(new OnLineWorkerRunnable(type, channelID, requestCallBack));
        }

        public void SendNewRunnable(int type, RequestCallBack<T> callBack) {
            mExecutorService.execute(new OnLineWorkerRunnable(type, (RequestCallBack<T>) callBack));
        }

        public void SendNewRunnable(int type, RequestCallBack<T> callBack, int category_id) {
            mExecutorService.execute(new OnLineWorkerRunnable(type, (RequestCallBack<T>) callBack, category_id));
        }

        public void SendNewRunnableWaPi(int type, RequestCallBack<T> callBack, int category_id) {
            mExecutorService.execute(new OnLineWorkerRunnable(type, (RequestCallBack<T>) callBack, category_id));
        }

        public void SendNewRunnable(int type, RequestCallBack<T> callBack, String url) {
            mExecutorService.execute(new OnLineWorkerRunnable(type, (RequestCallBack<T>) callBack, url));
        }

        public void SendNewRunnableRecommends(int type, RequestCallBack<T> callBack, int category_id) {
            mExecutorService.execute(new OnLineWorkerRunnable(type, (RequestCallBack<T>) callBack, category_id));
        }

        private class OnLineWorkerRunnable implements Runnable {

            private int mType;
            private String mKeyword;
            private String mString_Type;
            private int mLocalId;
            private int mCurrentPage = 1;
            //   private RequestCallBack mCallBack;

            private String mUrl;
            private int mCategory_id;
            private RequestCallBack<T> mCallBack;

            private OnLineWorkerRunnable(int type) {
                mType = type;
            }

            private OnLineWorkerRunnable(int type , RequestCallBack<T> callBack) {
                mType = type;
                mCallBack = callBack;
            }

            private OnLineWorkerRunnable(int type, RequestCallBack<T> mCallBack, String url) {
                mType = type;
                mUrl = url;
                this.mCallBack = mCallBack;
            }

            private OnLineWorkerRunnable(int type, RequestCallBack<T> mCallBack, int category_id) {
                mType = type;
                mCategory_id = category_id;
                this.mCallBack = mCallBack;
            }

            private OnLineWorkerRunnable(int type, final int localId, RequestCallBack requestCallBack) {
                mType = type;
                mLocalId = localId;
                if(requestCallBack != null) mCallBack = requestCallBack;
            }

            private OnLineWorkerRunnable(int type, final int localId, int current_page, RequestCallBack requestCallBack) {
                mType = type;
                mLocalId = localId;
                mCurrentPage = current_page;
                if(requestCallBack != null) mCallBack = requestCallBack;
            }

            private OnLineWorkerRunnable(int type, String keyword, String string_type, int current_page, RequestCallBack<T> requestCallBack) {
                mType = type;
                mString_Type = string_type;
                mKeyword = keyword;
                mCurrentPage = current_page;
                if(requestCallBack != null) mCallBack = requestCallBack;
            }

            @Override
            public void run() {
                switch (mType) {
                    case OPERATION_XXX_1:
                        Log.d(_TAG, "####### OPERATION xxx 1 ####"+ mCategory_id);
                        setBusyState(true);
                        RequestCallBack<T> callBack = (RequestCallBack<T>) mCallBack;
                        callBack.onFail("empty");
                        break;
                    case OPERATION_XXX_2:
                        Log.d(_TAG, "####### OPERATION xxx 2 ####"+ mCategory_id);
                        setBusyState(true);
                        RequestCallBack<T> callBack1 = (RequestCallBack<T>) mCallBack;
                        callBack1.onFail("empty");
                        break;
                    default:
                        break;
                }
            }
        }

        private boolean mIsBusy = false;

        public boolean isBusy() {
            return mIsBusy;
        }

        public void setBusyState(boolean isBusy) {
            mIsBusy = isBusy;
        }

        public void shutdown(){
            mExecutorService.shutdown();//not send new task to queue, not stop runnable..
            try {
                if (!mExecutorService.awaitTermination(5, TimeUnit.SECONDS)) {
                    mExecutorService.shutdownNow();
                    if (!mExecutorService.awaitTermination(5, TimeUnit.SECONDS))
                        System.err.println("Pool did not terminate");
                }
            } catch (InterruptedException e) {
                Log.d(_TAG, "shut down task now!!!");
                mExecutorService.shutdownNow();
                // Preserve interrupt status
                Thread.currentThread().interrupt();
            }
        }
    }
