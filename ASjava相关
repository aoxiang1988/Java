android jni开发：
1：使用AS和CMake
1）配置AS环境，增加javah工具生成，jni头文件
   Settings->Tools->External Tools->"+"
   Edit Tool中配置如下：
   Proram：C:\Program Files (x86)\Java\jdk1.8.0_144\bin\javah.exe            //配置javah工具路径
   Arguments：-classpath . -jni -d $ModuleFileDir$\src\main\cpp $FileClass$  //配置生成Javah头文件命令，路径是该工程路径（cpp文件夹是cmake使用的路径，也可使用jni使用androidmk文件）
   Working directory: $ModuleFileDir$\src\main\java                          //配置工程Java路径，native接口类的路径
   配置后，选中native接口定义的java文件，右键即可看到external tools定义的javah按键，生成jni的头文件
2）配置好CMake编译环境，在工程app路径下新建CMakeList.txt文件,参考链接 https://www.jianshu.com/p/39ca6c51bc20，CMake官方学习文档：英文文档：https://cmake.org/documentation/ ，中文文档：

https://www.zybuluo.com/khan-lau/note/254724

CMakeList.txt格式如下：
 For more information about using CMake with Android Studio, read the
# documentation: https://d.android.com/studio/projects/add-native-code.html

# Sets the minimum version of CMake required to build the native library.

#cmake支持的最小版本号
cmake_minimum_required(VERSION 3.4.1)

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds them for you.
# Gradle automatically packages shared libraries with your APK.

#设置so链接库的文件夹
 set(distribution_DIR ${CMAKE_SOURCE_DIR}/src/main/jniLibs)

#定义so库信息，add_library和set_target_properties成对写
 add_library(utils SHARED IMPORTED)
 set_target_properties(utils PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/src/main/jniLibs/${ANDROID_ABI}/libxxx1.so)

 add_library(cutils SHARED IMPORTED)
 set_target_properties(cutils PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/src/main/jniLibs/${ANDROID_ABI}/libxxx2.so)

#定义jni库的信息
 add_library( # Sets the name of the library.
              projectxxx

              # Sets the library as a shared library.
              SHARED

              # Provides a relative path to your source file(s).
              ${CMAKE_SOURCE_DIR}/src/main/cpp/xxx1.c
              ${CMAKE_SOURCE_DIR}/src/main/cpp/xxx2.c
              ${CMAKE_SOURCE_DIR}/src/main/cpp/xxx3.c
              ${CMAKE_SOURCE_DIR}/src/main/cpp/com_xxx_xxx_ProjectName_xxx_ProjectClass.cpp
              )

# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
              log-lib

              # Specifies the name of the NDK library that
              # you want CMake to locate.
              log )

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.
#添加链接库名
target_link_libraries( # Specifies the target library.
                      projectxxx
                      xxx2
                      xxx1
                      # Links the target library to the log library
                      # included in the NDK.
                      ${log-lib} )
3）完成以上步骤就可以进行AS 带so的APP编译。

PS：
jni定义的话使用动态定义比较好使，静态路径的函数可能导致编译失败，应该是路径问题
cpp文件建议使用以下方式生成：
========================================================================================================================================================================================
static jstring query_by_command(JNIEnv *env, jobject clazz, jstring modemType,jstring cmd,jstring prefix) {
     char output[100] = {0};
     
     return env->NewStringUTF(output);
  }

/*
 * Class:     com_tdtech_lte_ProjectMenuAssist_batemodem_ProjectMenu
 * Method:    setByCommands
 * Signature: (Ljava/lang/String;[Ljava/lang/String;)Z
 */
static jboolean set_by_commands(JNIEnv *env, jobject clazz, jstring modemType,jobjectArray cmd) {
    int ret = 0;
    
    return (ret == 0);
  }


static const char *classPathName = "com/xxx/xxx/xxx/xxx/XxxxXxx";//native接口定义类（路径+class名）

static JNINativeMethod methods[] = {
        { "queryByCommand", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", (void*)query_by_command},
        { "setByCommands", "(Ljava/lang/String;[Ljava/lang/String;)Z", (void*)set_by_commands},
};

/*
 * Register several native methods for one class.
 */
static int registerNativeMethods(JNIEnv* env, const char* className,
    JNINativeMethod* gMethods, int numMethods) {
    jclass clazz;

    clazz = env->FindClass(className);
    if (clazz == NULL) {
        ALOGE("Native registration unable to find class '%s'", className);
        return JNI_FALSE;
    }
    if (env->RegisterNatives(clazz, gMethods, numMethods) < 0) {
        ALOGE("RegisterNatives failed for '%s'", className);
        return JNI_FALSE;
    }

    return JNI_TRUE;
}


/*
 * Register native methods for all classes we know about.
 *
 * returns JNI_TRUE on success.
 */
static int registerNatives(JNIEnv* env) {
    if (!registerNativeMethods(env, classPathName,
                 methods, sizeof(methods) / sizeof(methods[0]))) {
        return JNI_FALSE;
    }

    return JNI_TRUE;
}

// ----------------------------------------------------------------------------
/*
 * This is called by the VM when the shared library is first loaded.
 */

typedef union {
    JNIEnv* env;
    void* venv;
} UnionJNIEnvToVoid;

jint JNI_OnLoad(JavaVM* vm, void* reserved) {

    UnionJNIEnvToVoid uenv;
    uenv.venv = NULL;
    jint result = -1;
    JNIEnv* env = NULL;

    ALOGI("JNI_OnLoad");

    if (vm->GetEnv(&uenv.venv, JNI_VERSION_1_4) != JNI_OK) {
        ALOGE("ERROR: GetEnv failed");
        goto bail;
    }
    env = uenv.env;

    if (registerNatives(env) != JNI_TRUE) {
        ALOGE("ERROR: registerNatives failed");
        goto bail;
    }

    result = JNI_VERSION_1_4;

bail:
    return result;
}
========================================================================================================================================================================================
2：AIDL添加：https://blog.csdn.net/luojiusan520/article/details/52884846
1）main文件夹下创建aidl文件夹，将AIDL文件加到该目录
2）代码中增加其实现
具体实现：
AS生成aidl文件后进行build生成对应的interFace类，在app\build\generated\source\aidl\debug\
生成后需要在服务端实现其功能：
在service类(MainService)中定义好private Binder mPropertInterface = new xxxxxxxxxxxxxx.Stub() {...}
public IBinder onBind(Intent intent) {
        return mPropertInterface;
    }
    绑定binder
将aidl文件夹拷贝到客户端：
定义一个ServiceConnection，
private IPropertInfoInterface mInfoInterface = null;
    private ServiceConnection mConnection = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            mInfoInterface = IPropertInfoInterface.Stub.asInterface(service);
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            mInfoInterface = null;
        }
    };
    在oncreat中用intent启动对应的服务
    Intent bindIntent = new Intent();
        bindIntent.setClassName("com.android.myapplication", "'com.android.myapplication.MainService");
        bindService(bindIntent, mConnection, BIND_AUTO_CREATE);
    服务绑定成功，可以通过mInfoInterface接口调用内部函数设置相关信息
=================================================================================================================================
3：JavaSwing开发：https://blog.csdn.net/xietansheng/article/details/72814492

